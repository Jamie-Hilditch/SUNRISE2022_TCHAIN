function gridded = cm_catenary(gridded,cfg)
    % fits a catenary to the pressure sensors
    % details of the method can be found in the README.md file

    fprintf('Using catenary chain model. This may take a while.\n')

%     % get z0 (z coordinate of the start of the catenary)
%     if isfield(cfg,'catenary_z0') && ~isempty(cfg.catenary_z0)
%         z0 = cfg.catenary_z0;
%     else
%         z0 = 0;
%     end

    % define z' as a function of s,b,c
    zprime = @(s,b,c) sqrt(s.^2 - 2*b.*s + c.^2) - c;

    % define a function to compute b,c exactly from two points
    function [ b,c ] = bc_exact(s1,zp1,s2,zp2)
        A = [s1,zp1;s2,zp2];
        y = [s1^2 - zp1^2; s2^2 - zp2^2]/2;
        x = y\A;
        b = x(1); c = x(2);
    end

    % now define the function to be minimised
    function [r, grad, Hess] = squared_error(b,c,s,zp)
        err = zprime(s,b,c)-zp;
        invsqrt = 1./sqrt(s.^2-2*s.*b + c^2); % common factor
        r = mean(err.^2);
        drdb = mean(2*err.*-s.*invsqrt);
        drdc = mean(2*err.*(c*invsqrt - 1));
        grad = [drdb, drdc];
        d2rdb2 = mean(2*s.^2.*invsqrt.^2 + 2*err.*-s.^2.*invsqrt.^3);
        d2rdbdc = mean(2*-s.*invsqrt.*(c*invsqrt - 1) + 2*err.*s.*c.*invsqrt.^3);
        d2rdc2 = mean(2*(c*invsqrt - 1).^2 + 2*err.*(s.^2 - 2*s.*b).*invsqrt.^3);
        Hess = [d2rdb2, d2rdbdc; d2rdbdc, d2rdc2];
    end

    % need these for parfor loop
    bc_exact_handle = @bc_exact;
    squared_error_handle = @squared_error;
    
    % define arrays for results
    Ntimes = length(gridded.dn);
    catenary_z0 = nan(1,Ntimes);
    catenary_a = nan(1,Ntimes);
    catenary_b = nan(1,Ntimes);
    catenary_c = nan(1,Ntimes);
    catenary_rms_error = nan(1,Ntimes);
    
    % exact variables for parfor loop
    pressure = gridded.p;
    pos = gridded.pos;

    % b must be larger than last pos
    bmin = pos(end);

    % for each timestep
    parfor i = 1:Ntimes
        % get the pressure sensor z' and s
        p = pressure(:,i);
        hasp = ~isnan(p);
        z = -p(hasp);
        z0 = z(1);
        zp = z - z0;
        s = pos(hasp);

        % compute the exact b and c for every pair of sensors
        Npressure = length(zp);
        b_exact = nan(Npressure*(Npressure-1)/2,1);
        c_exact = nan(Npressure*(Npressure-1)/2,1);
        ii = 1;
        for jj = 2:Npressure
            for kk = 1:jj-1
                [b_exact(ii), c_exact(ii)] = bc_exact_handle(s(jj),zp(jj),s(kk),zp(kk));
                ii = ii + 1;
            end
        end

        % initial condition for the minimisation will be median of exact values
        b0 = median(b_exact,'omitnan');
        c0 = median(c_exact,'omitnan');
        if b0 < bmin; b0 = bmin*1.1; end
        if c0 < b0; c0 = b0*1.1; end

        % function to be minimised
        func = @(x) squared_error_handle(x(1),x(2),s,zp);

        % now set the minimisation problem
        options = optimoptions( ...
            'fminunc', ...
            Algorithm='trust-region', ...
            SpecifyObjectiveGradient=true, ...
            HessianFcn='objective', ...
            Display='off', ...
            MaxIterations=50 ...
        );
            
        % solve minimisation problem
        try
            [x, fval, exitflag, output] = fminunc(func,[b0,c0],options);
        catch ME
            warning(ME.message)
            continue
        end
        if exitflag > 0
            catenary_a(i) = sqrt(x(2)^2 - x(1)^2);
            catenary_b(i) = x(1);
            catenary_c(i) = x(2);
            catenary_rms_error(i) = sqrt(fval);
        else
            fprintf('i = %06d: Exited with exitflag %d and message %s\n', ...
                i,exitflag,output.message);
        end
        
        
%         % update progress
%         if ~mod(i,int32(Ntimes/100))
%             fprintf('\tComputing catenary chain shapes (%.2f%%)\n',100*i/Ntimes)
%         end

    end
    
    % now compute x and z positions 
    gridded.x = catenary_a.*(asinh(catenary_b./catenary_a) - asinh((catenary_b - gridded.pos)./catenary_a));
    gridded.z = zprime(gridded.pos,catenary_b,catenary_c) + z0;

    % save info
    gridded.info.catenary_a = catenary_a;
    gridded.info.catenary_b = catenary_b;
    gridded.info.catenary_c = catenary_c;
    gridded.info.catenary_rms_error = catenary_rms_error;
    gridded.info.catenary_pos_to_x = 'a(asinh(b/a) - asinh((b-s)/a))';
    gridded.info.catenary_pos_to_z = 'z0 + (a^2 + (b^2 - s^2))^0.5 - (a^2 + b^2)^0.5';
end